[{"/Users/robwatkins/Dev/react-apps/typing-game/src/index.js":"1","/Users/robwatkins/Dev/react-apps/typing-game/src/reportWebVitals.js":"2","/Users/robwatkins/Dev/react-apps/typing-game/src/App.js":"3","/Users/robwatkins/Dev/react-apps/typing-game/src/components/StartScreen.js":"4","/Users/robwatkins/Dev/react-apps/typing-game/src/components/TypingGame.js":"5","/Users/robwatkins/Dev/react-apps/typing-game/src/components/CurrentWords.js":"6","/Users/robwatkins/Dev/react-apps/typing-game/src/components/Level.js":"7","/Users/robwatkins/Dev/react-apps/typing-game/src/components/GameOver.js":"8","/Users/robwatkins/Dev/react-apps/typing-game/src/components/FX.js":"9","/Users/robwatkins/Dev/react-apps/typing-game/src/hooks/useKeyPress.js":"10","/Users/robwatkins/Dev/react-apps/typing-game/src/components/Difficulty.js":"11","/Users/robwatkins/Dev/react-apps/typing-game/src/utils/time.js":"12","/Users/robwatkins/Dev/react-apps/typing-game/src/utils/fetchWords.js":"13","/Users/robwatkins/Dev/react-apps/typing-game/src/components/Selection.js":"14"},{"size":507,"mtime":1611424628290,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1611420762882,"results":"17","hashOfConfig":"16"},{"size":697,"mtime":1613097689499,"results":"18","hashOfConfig":"16"},{"size":1013,"mtime":1613097689500,"results":"19","hashOfConfig":"16"},{"size":3470,"mtime":1613097689501,"results":"20","hashOfConfig":"16"},{"size":1552,"mtime":1612626579691,"results":"21","hashOfConfig":"16"},{"size":159,"mtime":1611880535814,"results":"22","hashOfConfig":"16"},{"size":474,"mtime":1613097689500,"results":"23","hashOfConfig":"16"},{"size":389,"mtime":1613001628939,"results":"24","hashOfConfig":"16"},{"size":658,"mtime":1612571071288,"results":"25","hashOfConfig":"16"},{"size":597,"mtime":1612998552732,"results":"26","hashOfConfig":"16"},{"size":54,"mtime":1613071591570,"results":"27","hashOfConfig":"16"},{"size":415,"mtime":1613086148790,"results":"28","hashOfConfig":"16"},{"size":1156,"mtime":1613097157390,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1vuo62a",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/robwatkins/Dev/react-apps/typing-game/src/index.js",[],["62","63"],"/Users/robwatkins/Dev/react-apps/typing-game/src/reportWebVitals.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/App.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/StartScreen.js",["64","65"],"import React, { useState } from 'react';\n\nexport default function StartScreen({ difficulty, setDifficulty, setGameStarted }) {\n  const [alert, setAlert] = useState(false);\n\n  const handleSpanClick = event => {\n    setDifficulty(event.target.innerText);\n  }\n\n  const handleStartClick = () => {\n    difficulty ? setGameStarted(true) : setAlert(true);\n  }\n\n  return (\n    <section className=\"start-screen\">\n      <h3>Speed Typer</h3>\n      {(alert && !difficulty) && <p><em>Please make a selection:</em></p>}\n      <span className={difficulty === \"easy\" ? \"active\" : null} onClick={handleSpanClick}>\n        easy\n      </span>\n      <span> | </span>\n      <span className={difficulty === \"medium\" ? \"active\" : null} onClick={handleSpanClick}>\n        medium\n      </span>\n      <span> | </span>\n      <span className={difficulty === \"difficult\" ? \"active\" : null} onClick={handleSpanClick}>\n        difficult\n      </span>\n      <br/>\n      <button onClick={handleStartClick}>START GAME</button>\n    </section>\n  )\n}","/Users/robwatkins/Dev/react-apps/typing-game/src/components/TypingGame.js",["66","67"],"import React, { useState, useEffect, useCallback } from 'react';\nimport useSound from 'use-sound';\nimport { fetchWords } from '../utils/fetchWords';\nimport { currentTime } from '../utils/time';\nimport { useKeyPress } from '../hooks/useKeyPress';\nimport Level from './Level';\nimport CurrentWords from './CurrentWords';\nimport correctKeyStroke from '../sounds/correctKeyStroke2.wav';\nimport incorrectKeyStroke from '../sounds/incorrectKeyStroke.wav';\nimport FX from './FX';\nimport GameOver from './GameOver';\nimport Difficulty from './Difficulty';\n\nexport default function TypingGame({ difficulty }) {\n  const [words, setWords] = useState([]);\n  const [startTime, setStartTime] = useState();\n  const [letterIndex, setLetterIndex] = useState(0);\n  const [wordCount, setWordCount] = useState(0);\n  const [typedCharCount, setTypedCharCount] = useState(0);\n  const [correctCharCount, setCorrectCharCount] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [scrollSpeed, setScrollSpeed] = useState(25);\n  const [gameOver, setGameOver] = useState(false);\n  const [wpm, setWpm] = useState(0);\n  const [fxEnabled, setFxEnabled] = useState(false);\n  const [playKeystroke] = useSound(correctKeyStroke);\n  const [playMissedKeystroke] = useSound(incorrectKeyStroke);\n  \n  const buildWordList = useCallback(async () => {\n    let minLength, maxLength;\n    if (difficulty === 'easy') {\n      minLength = 3;\n      maxLength = 7;\n    } else if (difficulty === 'medium') {\n      minLength = 4\n      maxLength = 9;\n    } else {\n      minLength = 9\n      maxLength = 15;\n    }\n    let fetchedWords = await fetchWords(minLength, maxLength).then(response => response);\n    setWords(fetchedWords);\n  }, [setWords]);\n\n  useEffect(() => {\n    buildWordList();\n  }, [buildWordList]);\n\n  useKeyPress(key => {\n    !startTime && setStartTime(currentTime());\n    setTypedCharCount(typedCharCount + 1);\n    let currentWord = words[words.length - 1];\n    let currentLetter = currentWord.charAt(letterIndex);\n    if (key === currentLetter) {\n      fxEnabled && playKeystroke();\n      setCorrectCharCount(correctCharCount + 1);\n      let tempLetterIndex = letterIndex + 1;\n      if (currentWord.length === tempLetterIndex) {\n        let tempWordList = words.slice();\n        tempWordList.pop();\n        setWordCount(wordCount + 1);\n        if (tempWordList.length === 0) {\n          setLevel(level + 1);\n          setWords(buildWordList());\n          setScrollSpeed(scrollSpeed - 2);\n        } else\n        setWords(tempWordList);\n        setLetterIndex(0);\n      } else\n      setLetterIndex(tempLetterIndex);\n    } else {\n      fxEnabled && playMissedKeystroke();\n      (difficulty === 'medium' || difficulty === 'difficult') && setLetterIndex(0);\n    }\n  })\n\n  return (\n    <section className=\"typing-game\">\n      <div className=\"game-info\">\n        <Level level={level} />\n        <Difficulty difficulty={difficulty} />\n        <FX handleClick={() => setFxEnabled(!fxEnabled)} fxEnabled={fxEnabled} />\n      </div>\n      {words.length > 0 && \n        <CurrentWords \n          words={words} \n          setWords={setWords} \n          letterIndex={letterIndex} \n          scrollSpeed={scrollSpeed} \n          setGameOver={setGameOver}\n        />}\n      {gameOver && \n        <GameOver \n          wordCount={wordCount} \n          startTime={startTime} \n          wpm={wpm} \n          typedCharCount={typedCharCount}\n          correctCharCount={correctCharCount}\n        />}\n    </section>\n  )\n}","/Users/robwatkins/Dev/react-apps/typing-game/src/components/CurrentWords.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/Level.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/GameOver.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/FX.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/hooks/useKeyPress.js",[],["68","69"],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/Difficulty.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/utils/time.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/utils/fetchWords.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/Selection.js",["70","71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":5,"column":10,"nodeType":"79","messageId":"80","endLine":5,"endColumn":15},{"ruleId":"77","severity":1,"message":"81","line":7,"column":9,"nodeType":"79","messageId":"80","endLine":7,"endColumn":25},{"ruleId":"77","severity":1,"message":"82","line":24,"column":15,"nodeType":"79","messageId":"80","endLine":24,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":43,"column":6,"nodeType":"85","endLine":43,"endColumn":16,"suggestions":"86"},{"ruleId":"73","replacedBy":"87"},{"ruleId":"75","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":3,"column":1,"nodeType":"91","endLine":41,"endColumn":2},{"ruleId":"83","severity":1,"message":"92","line":8,"column":3,"nodeType":"79","endLine":8,"endColumn":12,"suggestions":"93"},{"ruleId":"94","severity":2,"message":"95","line":18,"column":5,"nodeType":"79","messageId":"96","endLine":18,"endColumn":16},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'alert' is assigned a value but never used.","Identifier","unusedVar","'handleStartClick' is assigned a value but never used.","'setWpm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'difficulty'. Either include it or remove the dependency array.","ArrayExpression",["99"],["97"],["98"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect contains a call to 'setParent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["100"],"no-undef","'setGameOver' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [difficulty]",{"range":"105","text":"106"},"Add dependencies array: []",{"range":"107","text":"108"},[1722,1732],"[difficulty]",[280,280],", []"]