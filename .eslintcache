[{"/Users/robwatkins/Dev/react-apps/typing-game/src/index.js":"1","/Users/robwatkins/Dev/react-apps/typing-game/src/reportWebVitals.js":"2","/Users/robwatkins/Dev/react-apps/typing-game/src/App.js":"3","/Users/robwatkins/Dev/react-apps/typing-game/src/components/StartScreen.js":"4","/Users/robwatkins/Dev/react-apps/typing-game/src/components/TypingGame.js":"5","/Users/robwatkins/Dev/react-apps/typing-game/src/components/Level.js":"6","/Users/robwatkins/Dev/react-apps/typing-game/src/components/GameOver.js":"7","/Users/robwatkins/Dev/react-apps/typing-game/src/components/FX.js":"8","/Users/robwatkins/Dev/react-apps/typing-game/src/hooks/useKeyPress.js":"9","/Users/robwatkins/Dev/react-apps/typing-game/src/utils/time.js":"10","/Users/robwatkins/Dev/react-apps/typing-game/src/utils/fetchWords.js":"11","/Users/robwatkins/dev/react-apps/typing-game/src/index.js":"12","/Users/robwatkins/dev/react-apps/typing-game/src/reportWebVitals.js":"13","/Users/robwatkins/dev/react-apps/typing-game/src/App.js":"14","/Users/robwatkins/dev/react-apps/typing-game/src/components/StartScreen.js":"15","/Users/robwatkins/dev/react-apps/typing-game/src/components/TypingGame.js":"16","/Users/robwatkins/dev/react-apps/typing-game/src/components/Level.js":"17","/Users/robwatkins/dev/react-apps/typing-game/src/components/FX.js":"18","/Users/robwatkins/dev/react-apps/typing-game/src/components/GameOver.js":"19","/Users/robwatkins/dev/react-apps/typing-game/src/utils/time.js":"20","/Users/robwatkins/dev/react-apps/typing-game/src/utils/fetchWords.js":"21","/Users/robwatkins/dev/react-apps/typing-game/src/hooks/useKeyPress.js":"22","/Users/robwatkins/dev/react-apps/typing-game/src/components/Words.js":"23"},{"size":507,"mtime":1611424628290,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1611420762882,"results":"26","hashOfConfig":"25"},{"size":697,"mtime":1613097689499,"results":"27","hashOfConfig":"25"},{"size":1013,"mtime":1613097689500,"results":"28","hashOfConfig":"25"},{"size":3470,"mtime":1613097689501,"results":"29","hashOfConfig":"25"},{"size":159,"mtime":1611880535814,"results":"30","hashOfConfig":"25"},{"size":474,"mtime":1613097689500,"results":"31","hashOfConfig":"25"},{"size":389,"mtime":1613001628939,"results":"32","hashOfConfig":"25"},{"size":658,"mtime":1612571071288,"results":"33","hashOfConfig":"25"},{"size":54,"mtime":1613071591570,"results":"34","hashOfConfig":"25"},{"size":415,"mtime":1613086148790,"results":"35","hashOfConfig":"25"},{"size":507,"mtime":1611424628290,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1611420762882,"results":"38","hashOfConfig":"37"},{"size":697,"mtime":1613240353294,"results":"39","hashOfConfig":"37"},{"size":863,"mtime":1613235306945,"results":"40","hashOfConfig":"37"},{"size":3762,"mtime":1613261741155,"results":"41","hashOfConfig":"37"},{"size":159,"mtime":1611880535814,"results":"42","hashOfConfig":"37"},{"size":462,"mtime":1613239495811,"results":"43","hashOfConfig":"37"},{"size":949,"mtime":1613242817985,"results":"44","hashOfConfig":"37"},{"size":54,"mtime":1613071591570,"results":"45","hashOfConfig":"37"},{"size":415,"mtime":1613086148790,"results":"46","hashOfConfig":"37"},{"size":658,"mtime":1612571071288,"results":"47","hashOfConfig":"37"},{"size":1657,"mtime":1613264142554,"results":"48","hashOfConfig":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1vuo62a",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"17vyqgk",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/robwatkins/Dev/react-apps/typing-game/src/index.js",[],["100","101"],"/Users/robwatkins/Dev/react-apps/typing-game/src/reportWebVitals.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/App.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/StartScreen.js",["102","103"],"import React, { useState } from 'react';\n\nexport default function StartScreen({ difficulty, setDifficulty, setGameStarted }) {\n  const [alert, setAlert] = useState(false);\n\n  const handleSpanClick = event => {\n    setDifficulty(event.target.innerText);\n  }\n\n  const handleStartClick = () => {\n    difficulty ? setGameStarted(true) : setAlert(true);\n  }\n\n  return (\n    <section className=\"start-screen\">\n      <h3>Speed Typer</h3>\n      {(alert && !difficulty) && <p><em>Please make a selection:</em></p>}\n      <span className={difficulty === \"easy\" ? \"active\" : null} onClick={handleSpanClick}>\n        easy\n      </span>\n      <span> | </span>\n      <span className={difficulty === \"medium\" ? \"active\" : null} onClick={handleSpanClick}>\n        medium\n      </span>\n      <span> | </span>\n      <span className={difficulty === \"difficult\" ? \"active\" : null} onClick={handleSpanClick}>\n        difficult\n      </span>\n      <br/>\n      <button onClick={handleStartClick}>START GAME</button>\n    </section>\n  )\n}","/Users/robwatkins/Dev/react-apps/typing-game/src/components/TypingGame.js",["104","105"],"import React, { useState, useEffect, useCallback } from 'react';\nimport useSound from 'use-sound';\nimport { fetchWords } from '../utils/fetchWords';\nimport { currentTime } from '../utils/time';\nimport { useKeyPress } from '../hooks/useKeyPress';\nimport Level from './Level';\nimport CurrentWords from './CurrentWords';\nimport correctKeyStroke from '../sounds/correctKeyStroke2.wav';\nimport incorrectKeyStroke from '../sounds/incorrectKeyStroke.wav';\nimport FX from './FX';\nimport GameOver from './GameOver';\nimport Difficulty from './Difficulty';\n\nexport default function TypingGame({ difficulty }) {\n  const [words, setWords] = useState([]);\n  const [startTime, setStartTime] = useState();\n  const [letterIndex, setLetterIndex] = useState(0);\n  const [wordCount, setWordCount] = useState(0);\n  const [typedCharCount, setTypedCharCount] = useState(0);\n  const [correctCharCount, setCorrectCharCount] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [scrollSpeed, setScrollSpeed] = useState(25);\n  const [gameOver, setGameOver] = useState(false);\n  const [wpm, setWpm] = useState(0);\n  const [fxEnabled, setFxEnabled] = useState(false);\n  const [playKeystroke] = useSound(correctKeyStroke);\n  const [playMissedKeystroke] = useSound(incorrectKeyStroke);\n  \n  const buildWordList = useCallback(async () => {\n    let minLength, maxLength;\n    if (difficulty === 'easy') {\n      minLength = 3;\n      maxLength = 7;\n    } else if (difficulty === 'medium') {\n      minLength = 4\n      maxLength = 9;\n    } else {\n      minLength = 9\n      maxLength = 15;\n    }\n    let fetchedWords = await fetchWords(minLength, maxLength).then(response => response);\n    setWords(fetchedWords);\n  }, [setWords]);\n\n  useEffect(() => {\n    buildWordList();\n  }, [buildWordList]);\n\n  useKeyPress(key => {\n    !startTime && setStartTime(currentTime());\n    setTypedCharCount(typedCharCount + 1);\n    let currentWord = words[words.length - 1];\n    let currentLetter = currentWord.charAt(letterIndex);\n    if (key === currentLetter) {\n      fxEnabled && playKeystroke();\n      setCorrectCharCount(correctCharCount + 1);\n      let tempLetterIndex = letterIndex + 1;\n      if (currentWord.length === tempLetterIndex) {\n        let tempWordList = words.slice();\n        tempWordList.pop();\n        setWordCount(wordCount + 1);\n        if (tempWordList.length === 0) {\n          setLevel(level + 1);\n          setWords(buildWordList());\n          setScrollSpeed(scrollSpeed - 2);\n        } else\n        setWords(tempWordList);\n        setLetterIndex(0);\n      } else\n      setLetterIndex(tempLetterIndex);\n    } else {\n      fxEnabled && playMissedKeystroke();\n      (difficulty === 'medium' || difficulty === 'difficult') && setLetterIndex(0);\n    }\n  })\n\n  return (\n    <section className=\"typing-game\">\n      <div className=\"game-info\">\n        <Level level={level} />\n        <Difficulty difficulty={difficulty} />\n        <FX handleClick={() => setFxEnabled(!fxEnabled)} fxEnabled={fxEnabled} />\n      </div>\n      {words.length > 0 && \n        <CurrentWords \n          words={words} \n          setWords={setWords} \n          letterIndex={letterIndex} \n          scrollSpeed={scrollSpeed} \n          setGameOver={setGameOver}\n        />}\n      {gameOver && \n        <GameOver \n          wordCount={wordCount} \n          startTime={startTime} \n          wpm={wpm} \n          typedCharCount={typedCharCount}\n          correctCharCount={correctCharCount}\n        />}\n    </section>\n  )\n}","/Users/robwatkins/Dev/react-apps/typing-game/src/components/Level.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/GameOver.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/components/FX.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/hooks/useKeyPress.js",[],["106","107"],"/Users/robwatkins/Dev/react-apps/typing-game/src/utils/time.js",[],"/Users/robwatkins/Dev/react-apps/typing-game/src/utils/fetchWords.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/index.js",[],["108","109"],"/Users/robwatkins/dev/react-apps/typing-game/src/reportWebVitals.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/App.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/StartScreen.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/TypingGame.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/Level.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/FX.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/GameOver.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/utils/time.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/utils/fetchWords.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/hooks/useKeyPress.js",[],"/Users/robwatkins/dev/react-apps/typing-game/src/components/Words.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":15},{"ruleId":"114","severity":1,"message":"118","line":7,"column":9,"nodeType":"116","messageId":"117","endLine":7,"endColumn":25},{"ruleId":"114","severity":1,"message":"119","line":24,"column":15,"nodeType":"116","messageId":"117","endLine":24,"endColumn":21},{"ruleId":"120","severity":1,"message":"121","line":43,"column":6,"nodeType":"122","endLine":43,"endColumn":16,"suggestions":"123"},{"ruleId":"110","replacedBy":"124"},{"ruleId":"112","replacedBy":"125"},{"ruleId":"110","replacedBy":"126"},{"ruleId":"112","replacedBy":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'alert' is assigned a value but never used.","Identifier","unusedVar","'handleStartClick' is assigned a value but never used.","'setWpm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'difficulty'. Either include it or remove the dependency array.","ArrayExpression",["130"],["128"],["129"],["128"],["129"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [difficulty]",{"range":"133","text":"134"},[1722,1732],"[difficulty]"]